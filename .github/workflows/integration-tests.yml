name: PII Detection & PR Validation

on:
  pull_request:
    branches: [ main ]

jobs:
  integration-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build and Run Integration Tests
        run: mvn clean test -Dtest=LoggingServiceIntegrationTest

      - name: Upload Logs (For PII Detection Later)
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logstest/application-direct-log.txt

  pii-detection:
    needs: integration-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Logs from Previous Job
        uses: actions/download-artifact@v4
        with:
          name: test-logs
          path: logstest/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PII Detector
        run: |
          pip install git+https://github.com/isudarsan/PII_Detector.git  # ✅ Updated repo URL

      - name: Run PII Detection on Logs
        id: pii_check
        run: |
          echo "🔍 Running PII Detection..."
          OUTPUT=$(pii-detector detect logstest/application-direct-log.txt) || true  # Avoid exit on error
          
          echo "$OUTPUT"

          # Check for ANY occurrence of "⚠️ PII detected" in the output
          if echo "$OUTPUT" | grep -q "⚠️ PII detected"; then
            echo "❌ PII detected in logs! Pull request will be denied."
            echo "pii_found=true" >> $GITHUB_ENV
            exit 1  # ❌ Fail the workflow, blocking PR merge
          else
            echo "✅ No PII found in logs. PR is valid."
            echo "pii_found=false" >> $GITHUB_ENV
          fi

      - name: Anonymize Logs If PII Was Found
        if: env.pii_found == 'true'
        run: |
          echo "🔄 Anonymizing log file..."
          pii-detector anonymize logstest/application-direct-log.txt --output_file logstest/application-direct-log.txt
          echo "✅ Log file anonymized (overwritten)."

      - name: Delete Existing Artifact Before Uploading
        if: env.pii_found == 'true'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}  # ✅ Use the Personal Access Token (PAT)
        run: |
          ARTIFACT_NAME="test-logs"
          echo "🔄 Checking for existing artifact: $ARTIFACT_NAME..."

          # Authenticate GitHub CLI using the PAT
          echo "$GH_PAT" | gh auth login --with-token

          # Get Artifact ID
          ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq ".artifacts[] | select(.name==\"$ARTIFACT_NAME\").id")

          if [[ -n "$ARTIFACT_ID" ]]; then
            echo "🚀 Found existing artifact ID: $ARTIFACT_ID. Deleting..."
            gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID
            echo "✅ Artifact deleted successfully."
          else
            echo "✅ No existing artifact found. Proceeding with upload."
          fi

      - name: Upload Updated Log File as `test-logs`
        if: env.pii_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-logs  # ✅ Overwrites the artifact
          path: logstest/application-direct-log.txt  # ✅ Uploads the anonymized log file

      - name: Generate Summary with Download Link
        run: |
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          echo "### ✅ Download Updated Log File" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Click here to download the updated log file](${ARTIFACT_URL})" >> $GITHUB_STEP_SUMMARY
